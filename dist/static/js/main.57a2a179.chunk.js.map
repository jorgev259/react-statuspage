{"version":3,"sources":["pages/helpers.jsx","pages/Home.jsx","pages/Admin.jsx","pages/Service.jsx","UserContext.js","App.js","reportWebVitals.js","index.js"],"names":["getColor","value","color","SiteRow","first","last","service","nameFlag","name","uptimeDays","state","values","map","r","uptime","avg","reduce","p","c","length","daysArray","interval","day","start","startOf","end","endOf","result","push","toISODate","plus","days","Interval","fromDateTimes","DateTime","now","minus","Row","className","classnames","Col","href","id","style","toFixed","xs","lightgreen","red","width","height","date","row","find","Tick","OverlayTrigger","placement","overlay","Tooltip","servicesQuery","gql","overallQuery","Home","useQuery","data","loading","allGood","services","every","allBad","yellow","type","active","fontWeight","i","Overall","uptime1","uptime7","uptime30","uptime90","servicesMutation","updateMutation","orderMutation","Admin","useState","logged","setLogged","fetchPolicy","props","refetch","AdminForm","EditService","EditOrder","LoginForm","query","useMutation","login","Form","onSubmit","e","persist","preventDefault","variables","serialize","target","hash","then","toast","success","Cookies","set","sameSite","catch","error","console","log","graphQLErrors","message","autoclose","md","FormGroup","htmlFor","required","Button","src","alt","mutate","inline","parseFloat","timeout","ping","createService","reset","err","Group","Label","Control","min","defaultValue","sort","a","b","item","setItem","formRef","useRef","useEffect","current","as","onChange","ev","s","Object","keys","key","options","updateService","setTimeout","ref","url","defaultChecked","update","order","onDragEnd","destination","draggableId","index","finally","droppableId","provided","snapshot","droppableProps","innerRef","isDraggingOver","padding","draggableProps","dragHandleProps","isDragging","draggableStyle","grid","margin","placeholder","serviceQuery","ResponseTime","border","response","max","UserContext","createContext","routes","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","token","get","setContext","headers","authorization","client","ApolloClient","cache","InMemoryCache","link","from","App","routeResult","useRoutes","newestOnTop","Container","onClick","navigate","title","ReactHtmlParser","footer","AppWrapper","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57a2a179.chunk.js","sourcesContent":["import { Row, Col, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { Interval, DateTime } from 'luxon'\nimport classnames from 'classnames'\nimport { A } from 'hookrouter'\n\nexport default function getColor (value) {\n  let color = ''\n\n  if (value !== null) {\n    color = 'green'\n    if (value < 99) color = 'lightgreen'\n    if (value < 95) color = 'yellow'\n    if (value < 90) color = 'red'\n  }\n  return color\n}\n\nfunction days (interval) {\n  let day = interval.start.startOf('day')\n  const end = interval.end.endOf('day')\n  const result = []\n\n  while (day < end) {\n    result.push(day.toISODate())\n    day = day.plus({ days: 1 })\n  }\n\n  return result\n}\n\nexport function SiteRow ({ first, last, service, nameFlag = false }) {\n  const { name, uptimeDays, state } = service\n\n  const values = uptimeDays.map(r => r.uptime)\n  const avg = values.reduce((p, c) => p + c, 0) / values.length\n\n  const daysArray = days(Interval.fromDateTimes(DateTime.now().minus({ days: 89 }), DateTime.now()))\n\n  return (\n    <Row className={classnames('infoRow', { first, 'pt-4': !first, 'pb-4': !last })}>\n      <Col>\n        <Row className='info'>\n          <Col className='pl-0'>\n            {nameFlag && (\n              <>\n                <A href={`/service/${service.id}`}><span style={{ color: 'white' }}>{name} ➟ </span></A>\n                <span className='mx-1'>|</span>\n              </>\n            )}\n            <span className={getColor(avg)}>{avg.toFixed(2)}%</span>\n          </Col>\n          <Col xs='auto' className={classnames('d-flex align-items-center pr-0', { lightgreen: state, red: !state })}>\n            <div className='status mx-1' style={{ width: '20px', height: '20px' }} />\n            <span>{state ? 'Operational' : 'Down'}</span>\n          </Col>\n        </Row>\n        <Row className='flex-nowrap mt-3 justify-content-end'>\n          {daysArray.map(date => {\n            const row = uptimeDays.find(r => r.date === date)\n            return <Tick key={date} date={date} value={row ? row.uptime : null} />\n          })}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport function Tick ({ value, date }) {\n  const color = getColor(value)\n\n  return (\n    <OverlayTrigger\n      placement='top'\n      overlay={\n        <Tooltip>\n          {date}\n          <br />\n          {value ? `${value.toFixed(2)}%` : ''}\n        </Tooltip>\n      }\n    >\n      <Col className='tick px-0'>\n        <div className={color} />\n      </Col>\n    </OverlayTrigger>\n  )\n}\n","import { gql, useQuery } from '@apollo/client'\nimport { Col, Row } from 'react-bootstrap'\nimport { SiteRow } from './helpers'\nimport classnames from 'classnames'\nimport Loader from 'react-loaders'\n\nconst servicesQuery = gql`\n  query Services {\n    services {\n      id\n      name\n      url\n      order\n      state\n\n      uptimeDays(days: 90) {\n        date\n        uptime\n      }\n    }\n  }\n`\n\nconst overallQuery = gql`\n  query Overall {\n    uptime1: uptime(days: 1)\n    uptime7: uptime(days: 7)\n    uptime30: uptime(days: 30)\n    uptime90: uptime(days: 90)\n  }\n`\n\nexport default function Home () {\n  const { data, loading } = useQuery(servicesQuery)\n\n  const allGood = data && data.services.every(r => r.state)\n  const allBad = data && data.services.every(r => !r.state)\n\n  return (\n    <>\n      <Row className={classnames('mainBox', { yellow: !allBad && !allGood, red: allBad, lightgreen: allGood })}>\n        {loading\n          ? <Col className='d-flex border-0 justify-content-center'><Loader type='pacman' active /></Col>\n          : (\n            <Col className={classnames('d-flex align-items-center', { 'justify-content-center': loading })}>\n              <div className='status mr-2' style={{ width: '20px', height: '20px' }} />\n              <h2 className='my-auto' style={{ fontWeight: 'bold' }}>\n                {!allBad && !allGood\n                  ? 'Some systems down'\n                  : (\n                      allGood ? 'All systems operational' : 'All systems down'\n                    )}\n              </h2>\n            </Col>\n            )}\n      </Row>\n\n      <Row className='mt-5'><h4>Services</h4></Row>\n      <Row className='mainBox'>\n        {loading\n          ? <Col className='d-flex border-0 justify-content-center'><Loader type='pacman' active /></Col>\n          : (\n            <Col>\n              {data.services.map((service, i) => (\n                <SiteRow key={service.id} service={service} first={i === 0} last={i === data.services.length - 1} nameFlag />\n              ))}\n            </Col>\n            )}\n      </Row>\n      <Overall />\n    </>\n  )\n}\n\nfunction Overall () {\n  const { data, loading } = useQuery(overallQuery)\n\n  return (\n    <>\n      <Row><h4 className='mt-5'>Overall Uptime</h4></Row>\n      <Row className='mainBox overall'>\n        {loading\n          ? <Col className='d-flex justify-content-center border-0'><Loader type='pacman' active /></Col>\n          : (\n            <>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.uptime1.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 24 hours\n                  </Col>\n                </Row>\n              </Col>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.uptime7.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 7 days\n                  </Col>\n                </Row>\n              </Col>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.uptime30.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 30 days\n                  </Col>\n                </Row>\n              </Col>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.uptime90.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 90 days\n                  </Col>\n                </Row>\n              </Col>\n            </>\n            )}\n      </Row>\n    </>\n  )\n}\n","\nimport { useMutation, gql, useQuery } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Col, Form, Button, Row, FormGroup } from 'react-bootstrap'\nimport serialize from 'form-serialize'\nimport Cookies from 'js-cookie'\nimport { useEffect, useState, useRef } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nconst servicesMutation = gql`\n  mutation createService($name: String!, $url: String!, $interval: Float!, $timeout: Float!, $ping: Boolean!) {\n    createService(name: $name, url: $url, interval: $interval, timeout: $timeout, ping: $ping){\n      name\n    }\n  }\n`\n\nconst updateMutation = gql`\n  mutation updateService($id: ID!, $options: ServiceUpdateOptions!) {\n    updateService(id:$id, options: $options){\n      id\n      name\n    }\n  }\n`\n\nconst orderMutation = gql`\n  mutation updateOrder($id: ID!, $destination: Int!) {\n    updateOrder(id:$id, destination: $destination)\n  }\n`\n\nconst servicesQuery = gql`\n  query Services {\n    services {\n      id\n      name\n      url\n      interval\n      timeout\n      order\n      ping\n      state\n    }\n  }\n`\n\nexport default function Admin () {\n  const [logged, setLogged] = useState(false)\n  const { data, refetch } = useQuery(servicesQuery, { fetchPolicy: 'network-only' })\n  const props = { data, refetch }\n\n  if (!logged) return <LoginForm setLogged={setLogged} />\n\n  return (\n    <>\n      <AdminForm />\n      {data && (\n        <>\n          <EditService {...props} />\n          <EditOrder {...props} />\n        </>\n      )}\n    </>\n  )\n}\n\nfunction LoginForm ({ setLogged }) {\n  const query = gql`\n  mutation Login($key: String!){\n    login(key: $key)\n  }\n`\n\n  const [login, { loading }] = useMutation(query)\n  const loader = ''\n\n  function submit (e) {\n    e.persist()\n    e.preventDefault()\n    const variables = serialize(e.target, { hash: true })\n\n    login({ variables }).then(result => {\n      toast.success('Logged in succesfully!')\n      Cookies.set('token', result.data.login, { sameSite: 'Lax' })\n      setLogged(true)\n    }).catch(error => {\n      console.log(error)\n      toast.error(error.graphQLErrors[0].message, { autoclose: false })\n    })\n  }\n\n  return (\n    <Form onSubmit={submit}>\n      <Row>\n        <Col md={4} className='mx-auto'>\n          <Row>\n            <Col>\n              <FormGroup>\n                <label htmlFor='key'>Access Key:</label>\n                <input className='ml-2' required type='password' name='key' />\n              </FormGroup>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Button type='submit' className='w-100' color='primary'>{loading ? <img src={loader} alt='loading' /> : 'Login'}</Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nfunction AdminForm () {\n  const [mutate] = useMutation(servicesMutation)\n  function handleSubmitForm (e) {\n    const variables = serialize(e.target, { hash: true })\n    variables.interval = parseFloat(variables.interval)\n    variables.timeout = parseFloat(variables.timeout)\n    variables.ping = variables.ping === 'on'\n\n    mutate({ variables }).then(result => {\n      toast.success(`Added service \"${result.data.createService.name}\" succesfully!`)\n      e.target.reset()\n    }).catch(err => {\n      console.log(err)\n      toast.error(err.message, { autoclose: false })\n    })\n\n    e.preventDefault()\n    e.persist()\n  }\n\n  return (\n    <Form inline className='mainBox p-4' onSubmit={handleSubmitForm}>\n      <Form.Row className='w-100 pb-3'>\n        <Col xs='12' md='4'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Name:</Form.Label>\n            <Form.Control type='text' name='name' required />\n          </Form.Group>\n        </Col>\n        <Col xs='12' md='4'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Url:</Form.Label>\n            <Form.Control type='text' name='url' required />\n          </Form.Group>\n        </Col>\n        <Col xs='12' md='4'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Ping mode:</Form.Label>\n            <Form.Control type='checkbox' name='ping' />\n          </Form.Group>\n        </Col>\n      </Form.Row>\n\n      <Form.Row className='w-100 pb-3'>\n        <Col xs='12' md='4'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Interval:</Form.Label>\n            <Form.Control type='number' min={0} defaultValue={5000} name='interval' required />\n          </Form.Group>\n        </Col>\n        <Col xs='12' md='4'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Timeout:</Form.Label>\n            <Form.Control type='number' min={0} defaultValue={3000} name='timeout' required />\n          </Form.Group>\n        </Col>\n        <Col xs='auto'>\n          <Button type='submit'>\n            Add Service\n          </Button>\n        </Col>\n      </Form.Row>\n    </Form>\n  )\n}\n\nfunction EditService ({ data, refetch }) {\n  const [mutate] = useMutation(updateMutation)\n  const services = [...data.services].sort((a, b) => a.id - b.id)\n  const [item, setItem] = useState(services[0])\n  const formRef = useRef(null)\n\n  useEffect(() => formRef.current.reset(), [item])\n\n  function handleSubmitForm (e) {\n    e.preventDefault()\n    e.persist()\n\n    const variables = serialize(e.target, { hash: true })\n    variables.interval = parseFloat(variables.interval)\n    variables.timeout = parseFloat(variables.timeout)\n    variables.ping = variables.ping === 'on'\n\n    for (const key of Object.keys(variables)) {\n      if (item[key] === variables[key]) delete variables[key]\n    }\n\n    if (Object.keys(variables).length === 0) return\n\n    mutate({ variables: { id: item.id, options: variables } }).then(result => {\n      toast.success(`Updated service \"${result.data.updateService.name}\" succesfully!`)\n      e.target.reset()\n      setTimeout(() => refetch(), 10 * 1000)\n    }).catch(err => {\n      console.log(err)\n      toast.error(err.message, { autoclose: false })\n    })\n  }\n\n  return (\n    <div className='mainBox p-4 mt-3'>\n      <Form.Row className='w-100'>\n        <Col xs='12'>\n          <Form.Group>\n            <Form.Control as='select' onChange={ev => setItem(services.find(s => s.id === ev.target.value))}>\n              {services.map(s => <option key={s.id} value={s.id}>{`(${s.id}) ${s.name}`}</option>)}\n            </Form.Control>\n          </Form.Group>\n        </Col>\n      </Form.Row>\n\n      <Form inline className='mt-2' onSubmit={handleSubmitForm} ref={formRef}>\n        <Form.Row className='w-100 pb-3'>\n          <Col xs='12' md='4'>\n            <Form.Group>\n              <Form.Label className='mr-2'>Name:</Form.Label>\n              <Form.Control type='text' name='name' required defaultValue={item.name} />\n            </Form.Group>\n          </Col>\n          <Col xs='12' md='4'>\n            <Form.Group>\n              <Form.Label className='mr-2'>Url:</Form.Label>\n              <Form.Control type='text' name='url' required defaultValue={item.url} />\n            </Form.Group>\n          </Col>\n          <Col xs='12' md='4'>\n            <Form.Group>\n              <Form.Label className='mr-2'>Ping mode:</Form.Label>\n              <Form.Control type='checkbox' name='ping' defaultChecked={item.ping} />\n            </Form.Group>\n          </Col>\n        </Form.Row>\n\n        <Form.Row className='w-100'>\n          <Col xs='12' md='4'>\n            <Form.Group>\n              <Form.Label className='mr-2'>Interval:</Form.Label>\n              <Form.Control type='number' min={0} name='interval' required defaultValue={item.interval} />\n            </Form.Group>\n          </Col>\n          <Col xs='12' md='4'>\n            <Form.Group>\n              <Form.Label className='mr-2'>Timeout:</Form.Label>\n              <Form.Control type='number' min={0} name='timeout' required defaultValue={item.timeout} />\n            </Form.Group>\n          </Col>\n          <Col xs='auto'>\n            <Button type='submit'>\n              Add Service\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n    </div>\n  )\n}\n\nfunction EditOrder ({ data, refetch }) {\n  const [update] = useMutation(orderMutation)\n  const services = [...data.services].sort((a, b) => a.order - b.order)\n\n  const grid = 8\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    ...draggableStyle\n  })\n\n  const getListStyle = isDraggingOver => ({ padding: grid })\n\n  function onDragEnd (result) {\n    if (!result.destination) return\n    update({ variables: { id: result.draggableId, destination: result.destination.index } })\n      .then(() => toast.success('Update succesful!'))\n      .catch(error => {\n        console.log(error)\n        toast.error('Update failed')\n      })\n      .finally(refetch)\n  }\n\n  return (\n    <div className='row mainBox py-0 px-0 mt-3'>\n      <div className='col px-0'>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId='droppable'>\n            {(provided, snapshot) => (\n              <div\n                {...provided.droppableProps || {}}\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {services.map(s => (\n                  <Draggable key={s.id} draggableId={s.id} index={s.order}>\n                    {(provided, snapshot) => (\n                      <div\n                        className='w-100 py-3 px-4 orderRow' key={s.id}\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps ? provided.draggableProps.style : {}\n                        )}\n                      >\n                        <h5 className='d-inline align-middle'>{s.name}</h5>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  )\n}\n","import { gql, useQuery } from '@apollo/client'\nimport { Col, Row } from 'react-bootstrap'\nimport { SiteRow } from './helpers'\nimport Loader from 'react-loaders'\n\nconst serviceQuery = gql`\n  query Services($id: ID!) {\n    service(id: $id) {\n      id\n      name\n      url\n      order\n      state\n\n      uptimeDays(days: 90) {\n        date\n        uptime\n      }\n\n      uptime1: uptime(days: 1)\n      uptime7: uptime(days: 7)\n      uptime30: uptime(days: 30)\n      uptime90: uptime(days: 90)\n\n      response: responseTime(days: 2){\n        avg\n        min\n        max\n      }\n    }\n  }\n`\n\nexport default function Home (props) {\n  const { data, loading } = useQuery(serviceQuery, { variables: { id: props.id } })\n\n  return (\n    <>\n      <h4>Uptime Last 90 days</h4>\n      <Row className='mainBox'>\n        {loading\n          ? <Col className='d-flex border-0 justify-content-center'><Loader type='pacman' active /></Col>\n          : (\n            <Col>\n              {data && <SiteRow key={data.service.id} service={data.service} first last />}\n            </Col>\n            )}\n      </Row>\n\n      <Overall data={data} loading={loading} />\n      <ResponseTime data={data} loading={loading} />\n    </>\n  )\n}\n\nfunction Overall (props) {\n  const { data, loading } = props\n\n  return (\n    <>\n      <h4 className='mt-5'>Overall Uptime</h4>\n      <Row className='mainBox overall'>\n        {loading\n          ? <Col className='d-flex border-0 justify-content-center'><Loader type='pacman' active /></Col>\n          : (\n            <>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.service.uptime1.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 24 hours\n                  </Col>\n                </Row>\n              </Col>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.service.uptime7.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 7 days\n                  </Col>\n                </Row>\n              </Col>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.service.uptime30.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 30 days\n                  </Col>\n                </Row>\n              </Col>\n              <Col>\n                <Row className='number'>\n                  <Col>\n                    {data && data.service.uptime90.toFixed(3)}%\n                  </Col>\n                </Row>\n                <Row className='title'>\n                  <Col>\n                    Last 90 days\n                  </Col>\n                </Row>\n              </Col>\n            </>\n            )}\n      </Row>\n    </>\n  )\n}\n\nfunction ResponseTime (props) {\n  const { data, loading } = props\n  return (\n    <>\n      <h4 className='mt-5'>Response Time Last 2 days </h4>\n      <Row className='mainBox overall'>\n        <Col style={{ border: 'none' }}>\n          <Row>\n            {loading\n              ? <Col className='d-flex border-0 justify-content-center'><Loader type='pacman' active /></Col>\n              : (\n                <>\n                  <Col>\n                    <Row className='number'>\n                      <Col>\n                        {data && data.service.response.avg.toFixed(2)}ms\n                      </Col>\n                    </Row>\n                    <Row className='title'>\n                      <Col>\n                        Avg. response time\n                      </Col>\n                    </Row>\n                  </Col>\n                  <Col>\n                    <Row className='number'>\n                      <Col>\n                        {data && data.service.response.max.toFixed(2)}ms\n                      </Col>\n                    </Row>\n                    <Row className='title'>\n                      <Col>\n                        Max. response time\n                      </Col>\n                    </Row>\n                  </Col>\n                  <Col>\n                    <Row className='number'>\n                      <Col>\n                        {data && data.service.response.min.toFixed(2)}ms\n                      </Col>\n                    </Row>\n                    <Row className='title'>\n                      <Col>\n                        Min. response time\n                      </Col>\n                    </Row>\n                  </Col>\n                </>\n                )}\n          </Row>\n        </Col>\n      </Row>\n    </>\n  )\n}\n","import { createContext } from 'react'\nconst UserContext = createContext()\nexport default UserContext\n","\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport './css/global.scss'\n\nimport ReactHtmlParser from 'react-html-parser'\nimport { useRoutes, navigate } from 'hookrouter'\nimport { ToastContainer } from 'react-toastify'\nimport Cookies from 'js-cookie'\nimport { HttpLink, ApolloLink, ApolloProvider, ApolloClient, InMemoryCache, from, useQuery, gql } from '@apollo/client'\n\nimport Home from './pages/Home'\nimport Admin from './pages/Admin'\nimport Service from './pages/Service'\n\nimport UserContext from './UserContext'\nimport { Container, Row } from 'react-bootstrap'\n\nconst routes = {\n  '/': () => <Home />,\n  '/service/:id': ({ id }) => <Service id={id} />,\n  '/admin': () => <Admin />\n}\n\nconst httpLink = new HttpLink({ uri: '/api' })\nconst authLink = new ApolloLink((operation, forward) => {\n  const token = Cookies.get('token')\n  if (token) operation.setContext({ headers: { authorization: `Bearer ${token}` } })\n\n  return forward(operation)\n})\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: from([authLink, httpLink])\n})\n\nfunction AppWrapper () {\n  const context = { }\n\n  return (\n    <ApolloProvider client={client}>\n      <UserContext.Provider value={context}>\n        <App />\n      </UserContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nfunction App () {\n  const { data } = useQuery(gql`query Title{ \n    title \n    footer\n  }`)\n  const routeResult = useRoutes(routes)\n\n  return (\n    <>\n      <ToastContainer newestOnTop />\n      <Container>\n        <Row className='my-4 py-2'>\n          <h1 className='title' onClick={() => navigate('/')}>{data ? data.title : ''}</h1>\n        </Row>\n        {routeResult || <div />}\n        {data && ReactHtmlParser(data.footer)}\n      </Container>\n    </>\n  )\n}\n\nexport default AppWrapper\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}