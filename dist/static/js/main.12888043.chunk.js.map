{"version":3,"sources":["pages/helpers.js","pages/Home.js","pages/Admin.js","pages/Service.js","UserContext.js","App.js","reportWebVitals.js","index.js"],"names":["getColor","value","color","SiteRow","first","last","service","nameFlag","name","uptimeDays","good","values","map","r","uptime","avg","reduce","p","c","length","daysArray","interval","day","start","startOf","end","endOf","result","push","toISODate","plus","days","Interval","fromDateTimes","DateTime","now","minus","Row","className","classnames","Col","href","id","style","toFixed","xs","lightgreen","red","width","height","date","row","find","Tick","OverlayTrigger","placement","overlay","Tooltip","servicesQuery","gql","overallQuery","Home","data","useQuery","allGood","services","every","allBad","yellow","lightGreen","fontWeight","i","Overall","uptime1","uptime7","uptime30","uptime90","servicesMutation","Admin","useMutation","mutate","Form","inline","onSubmit","e","variables","serialize","target","hash","parseFloat","timeout","then","toast","success","createService","reset","catch","err","console","log","error","message","autoclose","preventDefault","persist","md","Group","Label","Control","type","required","min","defaultValue","Button","serviceQuery","props","ResponseTime","border","response","max","UserContext","createContext","routes","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","token","Cookies","get","setContext","headers","authorization","client","ApolloClient","cache","InMemoryCache","link","from","App","routeResult","useRoutes","newestOnTop","Container","onClick","navigate","title","ReactHtmlParser","footer","AppWrapper","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12888043.chunk.js","sourcesContent":["import { Row, Col, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { Interval, DateTime } from 'luxon'\nimport classnames from 'classnames'\nimport { A } from 'hookrouter'\n\nexport default function getColor (value) {\n  let color = ''\n\n  if (value !== null) {\n    color = 'green'\n    if (value < 99) color = 'lightgreen'\n    if (value < 95) color = 'yellow'\n    if (value < 90) color = 'red'\n  }\n  return color\n}\n\nfunction days (interval) {\n  let day = interval.start.startOf('day')\n  const end = interval.end.endOf('day')\n  const result = []\n\n  while (day < end) {\n    result.push(day.toISODate())\n    day = day.plus({ days: 1 })\n  }\n\n  return result\n}\n\nexport function SiteRow ({ first, last, service, nameFlag = false }) {\n  const { name, uptimeDays, good } = service\n\n  const values = uptimeDays.map(r => r.uptime)\n  const avg = values.reduce((p, c) => p + c, 0) / values.length\n\n  const daysArray = days(Interval.fromDateTimes(DateTime.now().minus({ days: 89 }), DateTime.now()))\n\n  return (\n    <Row className={classnames('infoRow', { first, 'pt-4': !first, 'pb-4': !last })}>\n      <Col>\n        <Row className='info'>\n          <Col className='pl-0'>\n            {nameFlag && (\n              <>\n                <A href={`/service/${service.id}`}><span style={{ color: 'white' }}>{name}</span></A>\n                <span className='mx-1'>|</span>\n              </>\n            )}\n            <span className={getColor(avg)}>{avg.toFixed(2)}%</span>\n          </Col>\n          <Col xs='auto' className={classnames('d-flex align-items-center pr-0', { lightgreen: good, red: !good })}>\n            <div className='status mx-1' style={{ width: '20px', height: '20px' }} />\n            <span>{good ? 'Operational' : 'Down'}</span>\n          </Col>\n        </Row>\n        <Row className='flex-nowrap mt-3 justify-content-end'>\n          {daysArray.map(date => {\n            const row = uptimeDays.find(r => r.day === date)\n            return <Tick key={date} day={date} value={row ? row.uptime : null} />\n          })}\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport function Tick ({ value, day }) {\n  const color = getColor(value)\n\n  return (\n    <OverlayTrigger\n      placement='top'\n      overlay={\n        <Tooltip>\n          {day}\n          <br />\n          {value ? value.toFixed(2) : ''}%\n        </Tooltip>\n      }\n    >\n      <Col className='tick px-0'>\n        <div className={color} />\n      </Col>\n    </OverlayTrigger>\n  )\n}\n","import { gql, useQuery } from '@apollo/client'\nimport { Col, Row } from 'react-bootstrap'\nimport { SiteRow } from './helpers'\nimport classnames from 'classnames'\n\nconst servicesQuery = gql`\n  query Services {\n    services {\n      id\n      name\n      url\n      order\n      good\n\n      uptimeDays(days: 90) {\n        day\n        uptime\n      }\n    }\n  }\n`\n\nconst overallQuery = gql`\n  query Overall {\n    uptime1: uptime(days: 1)\n    uptime7: uptime(days: 7)\n    uptime30: uptime(days: 30)\n    uptime90: uptime(days: 90)\n  }\n`\n\nexport default function Home () {\n  const { data } = useQuery(servicesQuery)\n\n  const allGood = data && data.services.every(r => r.good)\n  const allBad = data && data.services.every(r => !r.good)\n\n  return (\n    <>\n      <Row className={classnames('mainBox', { yellow: !allBad && !allGood, red: allBad, lightGreen: allGood })}>\n        <Col className='d-flex align-items-center '>\n          <div className='status mr-2' style={{ width: '20px', height: '20px' }} />\n          <h2 className='my-auto' style={{ fontWeight: 'bold' }}>\n            {!allBad && !allGood\n              ? 'Some systems down'\n              : (\n                  allGood ? 'All systems operational' : 'All systems down'\n                )}\n          </h2>\n        </Col>\n      </Row>\n\n      <Row className='mt-5'><h4>Services</h4></Row>\n      <Row className='mainBox'>\n        <Col>\n          {data && data.services.map((service, i) => (\n            <SiteRow key={service.id} service={service} first={i === 0} last={i === data.services.length - 1} nameFlag />\n          ))}\n        </Col>\n      </Row>\n\n      <Overall />\n    </>\n  )\n}\n\nfunction Overall () {\n  const { data } = useQuery(overallQuery)\n\n  return (\n    <>\n      <Row><h4 className='mt-5'>Overall Uptime</h4></Row>\n      <Row className='mainBox overall'>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.uptime1.toFixed(3)}%\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 24 hours\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.uptime7.toFixed(3)}\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 7 days\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.uptime30.toFixed(3)}\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 30 days\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.uptime90.toFixed(3)}\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 90 days\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  )\n}\n","\nimport { useMutation, gql } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Col, Form, Button } from 'react-bootstrap'\nimport serialize from 'form-serialize'\n\nconst servicesMutation = gql`\n  mutation createService($name: String!, $url: String!, $interval: Float!, $timeout: Float!) {\n    createService(name: $name, url: $url, interval: $interval, timeout: $timeout){\n      name\n    }\n  }\n`\n\nexport default function Admin () {\n  const [mutate] = useMutation(servicesMutation)\n  function handleSubmitForm (e) {\n    const variables = serialize(e.target, { hash: true })\n    variables.interval = parseFloat(variables.interval)\n    variables.timeout = parseFloat(variables.timeout)\n\n    mutate({ variables }).then(result => {\n      toast.success(`Added service \"${result.data.createService.name}\" succesfully!`)\n      e.target.reset()\n    }).catch(err => {\n      console.log(err)\n      toast.error(err.message, { autoclose: false })\n    })\n\n    e.preventDefault()\n    e.persist()\n  }\n\n  return (\n    <Form inline className='mainBox p-4' onSubmit={handleSubmitForm}>\n      <Form.Row className='w-100 pb-3'>\n        <Col xs='12' md='auto'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Name:</Form.Label>\n            <Form.Control type='text' name='name' required />\n          </Form.Group>\n        </Col>\n        <Col xs='12' md='auto'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Url:</Form.Label>\n            <Form.Control type='text' name='url' required />\n          </Form.Group>\n        </Col>\n      </Form.Row>\n\n      <Form.Row className='w-100 pb-3'>\n        <Col xs='12' md='auto'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Interval:</Form.Label>\n            <Form.Control type='number' min={0} defaultValue={5000} name='interval' required />\n          </Form.Group>\n        </Col>\n        <Col xs='12' md='auto'>\n          <Form.Group>\n            <Form.Label className='mr-2'>Timeout:</Form.Label>\n            <Form.Control type='number' min={0} defaultValue={3000} name='timeout' required />\n          </Form.Group>\n        </Col>\n        <Col xs='auto'>\n          <Button type='submit'>\n            Add Service\n          </Button>\n        </Col>\n      </Form.Row>\n    </Form>\n  )\n}\n","import { gql, useQuery } from '@apollo/client'\nimport { Col, Row } from 'react-bootstrap'\nimport { SiteRow } from './helpers'\n\nconst serviceQuery = gql`\n  query Services($id: ID!) {\n    service(id: $id) {\n      id\n      name\n      url\n      order\n      good\n\n      uptimeDays(days: 90) {\n        day\n        uptime\n      }\n\n      uptime1: uptime(days: 1)\n      uptime7: uptime(days: 7)\n      uptime30: uptime(days: 30)\n      uptime90: uptime(days: 90)\n\n      response: responseTime(days: 2){\n        avg\n        min\n        max\n      }\n    }\n  }\n`\n\nexport default function Home (props) {\n  const { data } = useQuery(serviceQuery, { variables: { id: props.id } })\n\n  return (\n    <>\n      <h4>Uptime Last 90 days</h4>\n      <Row className='mainBox'>\n        <Col>\n          {data && <SiteRow key={data.service.id} service={data.service} first last />}\n        </Col>\n      </Row>\n\n      <Overall data={data} />\n      <ResponseTime data={data} />\n    </>\n  )\n}\n\nfunction Overall (props) {\n  const { data } = props\n\n  return (\n    <>\n      <h4 className='mt-5'>Overall Uptime</h4>\n      <Row className='mainBox overall'>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.service.uptime1.toFixed(3)}%\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 24 hours\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.service.uptime7.toFixed(3)}%\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 7 days\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.service.uptime30.toFixed(3)}%\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 30 days\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Row className='number'>\n            <Col>\n              {data && data.service.uptime90.toFixed(3)}%\n            </Col>\n          </Row>\n          <Row className='title'>\n            <Col>\n              Last 90 days\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nfunction ResponseTime (props) {\n  const { data } = props\n  return (\n    <>\n      <h4 className='mt-5'>Response Time Last 2 days </h4>\n      <Row className='mainBox overall'>\n        <Col style={{ border: 'none' }}>\n          <Row>\n            <Col>\n              <Row className='number'>\n                <Col>\n                  {data && data.service.response.avg.toFixed(2)}ms\n                </Col>\n              </Row>\n              <Row className='title'>\n                <Col>\n                  Avg. response time\n                </Col>\n              </Row>\n            </Col>\n            <Col>\n              <Row className='number'>\n                <Col>\n                  {data && data.service.response.max.toFixed(2)}ms\n                </Col>\n              </Row>\n              <Row className='title'>\n                <Col>\n                  Max. response time\n                </Col>\n              </Row>\n            </Col>\n            <Col>\n              <Row className='number'>\n                <Col>\n                  {data && data.service.response.min.toFixed(2)}ms\n                </Col>\n              </Row>\n              <Row className='title'>\n                <Col>\n                  Min. response time\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  )\n}\n","import { createContext } from 'react'\nconst UserContext = createContext()\nexport default UserContext\n","\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport './css/global.scss'\n\nimport ReactHtmlParser from 'react-html-parser'\nimport { useRoutes, navigate } from 'hookrouter'\nimport { ToastContainer } from 'react-toastify'\nimport Cookies from 'js-cookie'\nimport { HttpLink, ApolloLink, ApolloProvider, ApolloClient, InMemoryCache, from, useQuery, gql } from '@apollo/client'\n\nimport Home from './pages/Home'\nimport Admin from './pages/Admin'\nimport Service from './pages/Service'\n\nimport UserContext from './UserContext'\nimport { Container, Row } from 'react-bootstrap'\n\nconst routes = {\n  '/': () => <Home />,\n  '/service/:id': ({ id }) => <Service id={id} />,\n  '/admin': () => <Admin />\n}\n\nconst httpLink = new HttpLink({ uri: '/api' })\nconst authLink = new ApolloLink((operation, forward) => {\n  const token = Cookies.get('token')\n  if (token) operation.setContext({ headers: { authorization: token } })\n\n  return forward(operation)\n})\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: from([authLink, httpLink])\n})\n\nfunction AppWrapper () {\n  const context = { }\n\n  return (\n    <ApolloProvider client={client}>\n      <UserContext.Provider value={context}>\n        <App />\n      </UserContext.Provider>\n    </ApolloProvider>\n  )\n}\n\nfunction App () {\n  const { data } = useQuery(gql`query Title{ \n    title \n    footer\n  }`)\n  const routeResult = useRoutes(routes)\n\n  return (\n    <>\n      <ToastContainer newestOnTop />\n      <Container>\n        <Row className='my-4 py-2'>\n          <h1 className='title' onClick={() => navigate('/')}>{data ? data.title : ''}</h1>\n        </Row>\n        {routeResult || <div />}\n        {data && ReactHtmlParser(data.footer)}\n      </Container>\n    </>\n  )\n}\n\nexport default AppWrapper\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}